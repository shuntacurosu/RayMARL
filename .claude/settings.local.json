{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(gh issue create --title \"1. プロジェクト構造とコアインターフェース設定\" --body \"$(cat <<''EOF''\n## 概要\nプロジェクトの基盤となるディレクトリ構造と基本インターフェースを設定します。\n\n## 実装内容\n\n### 1.1 プロジェクトディレクトリ構造とベースインターフェース作成\n- [ ] `src/agents/`, `src/networks/`, `src/environments/`, `src/distributed/`, `src/utils/` ディレクトリ構造を作成\n- [ ] ベースエージェント、環境アダプタ、データ検証器の抽象基底クラスを定義\n- [ ] テストフレームワーク（pytest + Ray Test Utils）をセットアップ\n- **Requirements**: 1.1, 2.1, 3.1\n\n### 1.2 設定管理システムとユーティリティ実装\n- [ ] Hydra + YAML による階層的設定管理システムを実装\n- [ ] ログ機能、メトリクス収集、エラーハンドリングユーティリティを作成\n- [ ] カスタム例外階層（AdaptiveMAException）を定義\n- **Requirements**: 6.1, 6.4\n\n## 成功条件\n- プロジェクト構造が適切に作成されている\n- 基本インターフェースが正しく定義されている\n- テストフレームワークが動作する\n- 設定管理システムが機能する\nEOF\n)\")",
      "Bash(gh issue create --title \"2. データモデルとバリデーション（テスト駆動アプローチ）\" --body \"$(cat <<''EOF''\n## 概要\nテスト駆動開発アプローチでコアデータモデルとバリデーションシステムを実装します。\n\n## 実装内容\n\n### 2.1 コアデータモデルのテストと実装\n- [ ] Agent, Experience, ValidationResult エンティティのテストを最初に作成\n- [ ] Pydantic を使用した型安全なデータクラスを実装\n- [ ] 基本的なバリデーション機能（フィールド検証、制約チェック）をテスト\n- **Requirements**: 3.1, 3.2\n\n### 2.2 データ検証システムの実装\n- [ ] DataValidator クラスのテストを作成（異常値検出、整合性チェック）\n- [ ] 統計的異常値検出アルゴリズム（IQR、Z-score）を実装\n- [ ] マルチエージェント環境でのデータ整合性チェック機能を追加\n- [ ] 物理制約違反検出機能（連続状態変化の妥当性）をテスト・実装\n- **Requirements**: 3.1, 3.2, 3.3, 3.4, 3.5, 3.6\n\n### 2.3 Experience Buffer と優先度付きサンプリング実装\n- [ ] Experience Buffer のテスト作成（CRUD操作、同時アクセス）\n- [ ] Ray Object Store を使用した分散Experience Buffer を実装\n- [ ] 優先度付きサンプリング（Prioritized Experience Replay）をテスト・実装\n- [ ] メモリ効率化とガベージコレクション機能を追加\n- **Requirements**: 5.6\n\n## 成功条件\n- 全データモデルがテストカバレッジ100%\n- バリデーション機能が正常に動作する\n- Experience Bufferが分散環境で正しく動作する\nEOF\n)\")",
      "Bash(gh issue create --title \"3. 環境非依存インターフェース層\" --body \"$(cat <<''EOF''\n## 概要\n異なる強化学習環境に対応するための環境非依存インターフェース層を実装します。\n\n## 実装内容\n\n### 3.1 Environment Adapter システムの実装\n- [ ] EnvironmentAdapter インターフェースのテストを作成\n- [ ] Gymnasium + PettingZoo 環境用の標準アダプタを実装\n- [ ] 観測値・行動空間の自動正規化機能をテスト・実装\n- **Requirements**: 2.1, 2.2, 2.3\n\n### 3.2 動的環境適応機能の実装\n- [ ] 環境変更時のネットワーク構造自動適応テストを作成\n- [ ] 連続値制御環境での離散化/Policy Gradient 自動切り替え機能を実装\n- [ ] 複数環境同時実行での個別最適化機能をテスト・実装\n- **Requirements**: 2.2, 2.4, 2.5\n\n## 成功条件\n- 複数の環境タイプで動作確認済み\n- 環境切り替えが自動で行える\n- 動的適応機能が正常に動作する\nEOF\n)\")",
      "Bash(gh issue create --title \"4. 分散エージェント管理システム\" --body \"$(cat <<''EOF''\n## 概要\nRay を使用した分散エージェント管理システムとDQNエージェントを実装します。\n\n## 実装内容\n\n### 4.1 Agent Manager の実装\n- [ ] AgentManager クラスのテストを作成（エージェント追加・削除・スケーリング）\n- [ ] Ray Remote Actor を使用した動的エージェント管理を実装\n- [ ] エージェント状態監視と負荷バランシング機能をテスト・実装\n- **Requirements**: 1.1, 1.2, 1.3, 1.4, 1.5\n\n### 4.2 DQN Agent の実装\n- [ ] DQN Agent クラスのテストを作成（学習、推論、経験収集）\n- [ ] PyTorch を使用したDQNネットワーク（CNN + FC）を実装\n- [ ] Target Network の更新機能とDouble DQN サポートを追加\n- [ ] エージェント間のパラメータ同期機能をテスト・実装\n- **Requirements**: 5.1, 5.2\n\n## 成功条件\n- エージェントの動的スケーリングが可能\n- DQN学習が正常に動作する\n- 分散環境でのパラメータ同期が機能する\nEOF\n)\")",
      "Bash(gh issue create --title \"5. 分散学習協調システム\" --body \"$(cat <<''EOF''\n## 概要\n分散学習環境でのパラメータ同期と協調学習システムを実装します。\n\n## 実装内容\n\n### 5.1 Parameter Server の実装\n- [ ] Parameter Server のテストを作成（パラメータ同期、勾配更新）\n- [ ] Ray Actor を使用した分散Parameter Server を実装\n- [ ] 非同期パラメータ更新と一貫性維持機能をテスト・実装\n- **Requirements**: 5.1, 5.2\n\n### 5.2 Distributed Coordinator の実装\n- [ ] DistributedCoordinator のテストを作成（クラスタ管理、障害処理）\n- [ ] Ray Cluster 初期化と動的スケーリング機能を実装\n- [ ] ワーカー障害検出と自動復旧機能をテスト・実装\n- [ ] 負荷分散とリソース最適化機能を追加\n- **Requirements**: 5.3, 5.4, 5.5\n\n## 成功条件\n- 分散学習が安定して動作する\n- 障害時の自動復旧が機能する\n- パラメータ同期が正確に行われる\nEOF\n)\")",
      "Bash(gh issue create:*)",
      "Bash(gh issue:*)"
    ],
    "deny": []
  }
}